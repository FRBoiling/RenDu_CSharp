using System;
using System.Collections.Generic;
using System.Text;

namespace Proto2CS
{
    public static class CSFileGenerateHelper
    {
        /// <summary>
        /// 文件开头说明文字框架
        /// </summary>
        /// <returns></returns>
        public static StringBuilder ClassCommentsFrame()
        {
            //------------------------------------------------------------------------------
            // <auto-generated>
            //     This code was generated by a tool.(The author is Boiling)
            //     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.  
            // </auto-generated>
            //------------------------------------------------------------------------------

            StringBuilder sb = new StringBuilder();
            sb.Append(" //------------------------------------------------------------------------------").Append(Environment.NewLine);
            sb.Append(" // <auto-generated>").Append(Environment.NewLine);
            sb.Append(" //     This code was generated by a tool.(The author is Boiling)").Append(Environment.NewLine);
            sb.Append(" //     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.").Append(Environment.NewLine);
            sb.Append(" // </auto-generated>").Append(Environment.NewLine);
            sb.Append(" //------------------------------------------------------------------------------").Append(Environment.NewLine);
            return sb;
        }

        /// <summary>
        /// using框架
        /// </summary>
        /// <returns></returns>
        public static StringBuilder IncludeHeadFrame(List<StringBuilder> includes)
        {
            StringBuilder sb = new StringBuilder();
            if (includes != null)
            {
                foreach (var item in includes)
                {
                    sb.Append(item).Append(Environment.NewLine);
                }
            }
            sb.Append(Environment.NewLine);
            return sb;
        }


        /// <summary>
        /// namespace框架
        /// </summary>
        /// <param name="nameSpace"></param>
        /// <param name="classBody"></param>
        /// <returns></returns>
        public static StringBuilder NameSpaceFrame(string nameSpace, StringBuilder classBody)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append($"namespace {nameSpace}").Append(Environment.NewLine);
            sb.Append("{").Append(Environment.NewLine);
            sb.Append(classBody).Append(Environment.NewLine);
            sb.Append("}").Append(Environment.NewLine);
            return sb;
        }

        /// <summary>
        /// 类框架
        /// </summary>
        /// <param name="className"></param>
        /// <param name="attrs"></param>
        /// <param name="methods"></param>
        /// <param name="tabCount"></param>
        /// <returns></returns>
        public static StringBuilder ClassFrame(string className, List<StringBuilder> attrs = null, List<StringBuilder> methods = null, int tabCount = 1)
        {
            string tab = SetTab(tabCount);
            StringBuilder sb = new StringBuilder();
            sb.Append($"{tab}public class {className}").Append(Environment.NewLine);
            sb.Append($"{tab}").Append("{").Append(Environment.NewLine);
            if (attrs != null)
            {
                foreach (var item in attrs)
                {
                    sb.Append($"{tab}").Append(item.ToString());
                }
            }
            if (methods != null)
            {
                foreach (var item in methods)
                {
                    sb.Append($"{tab}").Append(item.ToString());
                }
            }
            sb.Append($"{tab}").Append("}").Append(Environment.NewLine);
            return sb;
        }

        /// <summary>
        /// 变量框架
        /// </summary>
        /// <param name="attrType"></param>
        /// <param name="attrName"></param>
        /// <param name="tabCount"></param>
        /// <returns></returns>
        public static StringBuilder AttrFrame(string attrType, string attrName, int tabCount = 2)
        {
            string tab = SetTab(tabCount);
            StringBuilder sb = new StringBuilder();
            sb.Append($"{tab}{attrType} {attrName};");
            sb.Append(Environment.NewLine);
            return sb;
        }

        /// <summary>
        /// 函数框架
        /// </summary>
        /// <param name="methodReturnType"></param>
        /// <param name="methodName"></param>
        /// <param name="methodValue"></param>
        /// <param name="spaceCount"></param>
        /// <returns></returns>
        public static StringBuilder MethodFrame(string methodReturnType, string methodName, List<StringBuilder> methodContents, int tabCount = 2)
        {
            string tab = SetTab(tabCount);
            StringBuilder sb = new StringBuilder();
            sb.Append($"{tab}public {methodReturnType} {methodName}").Append(Environment.NewLine);
            sb.Append($"{tab}").Append("{").Append(Environment.NewLine);
            foreach (var item in methodContents)
            {
                sb.Append($"{tab}").Append(item).Append(Environment.NewLine);
            }
            sb.Append($"{tab}").Append("}").Append(Environment.NewLine);
            return sb;
        }


        private static string SetTab(int tabCount)
        {
            StringBuilder tab = new StringBuilder();
            for (int i = 0; i < tabCount; i++)
            {
                tab.Append("/t");
            }
            return tab.ToString();
        }
    }
}
